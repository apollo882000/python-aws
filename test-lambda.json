{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Resources": {
    "InlinePythonLambdaFunction": {
		"Type": "AWS::Lambda::Function",
		"Properties": {
			"Code": {
				"ZipFile": { "Fn::Join": ["\n", [
					"import json",
					"import boto3",
					"import time",
					"import urllib.request",

					"print(\"Loading function\")",

					"s3_client = boto3.client('s3')",
					"s3_resource = boto3.resource('s3')",

					"def parser_handler(event, context):",
					"    source_bucket=event['Records'][0]['s3']['bucket']['name']",
					"    key = event['Records'][0]['s3']['object']['key']",
					"    print (source_bucket)",
					"    print (key)",
					"    target_bucket = '201809-test-s3destbucket'",
					"    copy_source = {'Bucket':source_bucket,'Key':key}",
    
					"    ## Read the content of S3 object",
					"    obj = s3_resource.Object(source_bucket, key)",
					"    data = obj.get()['Body'].read()",
					"    # print (data)",
    
					"    dynamodb = boto3.resource('dynamodb', region_name='ap-southeast-1')",
					"    table = dynamodb.Table('test-rawdata')",
					
					"    ## Parser JSON data",
					"    loaded_json = json.loads(data)",
					"    for x in loaded_json:",
					"       print (\"\\n\")",
					"       print (\"date:\",x['date'])",
					"       print (\"high:\",x['high'])",
					"       print (\"low:\",x['low'])",
					"       print (\"open:\",x['open'])",
					"       print (\"close:\",x['close'])",
					"       print (\"volume:\",x['volume'])",
					"       print (\"quoteVolume:\",x['quoteVolume'])",
					"       print (\"weightedAverage:\",x['weightedAverage'])",
					"       response = table.put_item(",
					"       Item={",
					"             'Date': str(x['date']),",
					"             'high': str(x['high']),",
					"             'low:': str(x['low']),",
					"             'open': str(x['open']),",
					"             'close': str(x['close']),",
					"             'volume': str(x['volume']),",
					"             'quoteVolume': str(x['quoteVolume']),",
					"             'weightedAverage': str(x['weightedAverage'])",
					"            }",
					"       )",
					"       print(\"PutItem succeeded:\")",
					
					"    print (\"Waiting for the file persist in the source bucket\")",
					"    waiter = s3_client.get_waiter('object_exists')",
					"    waiter.wait(Bucket=source_bucket, Key=key)",
					"    print(\"Copy object from source s3 bucket to target s3 bucket\")",
					"    s3_client.copy_object(Bucket=target_bucket,Key=key,CopySource=copy_source)",
					"    s3_resource.Object(source_bucket, key).delete()"
					]
				]}
		},
       "Description": "Data Ingestion with Python",
       "FunctionName": "201809-test-lambda",
       "Handler": "index.parser_handler",
       "MemorySize": "128",
       "Role": "arn:aws:iam::<account id>:role/aws-lambda-s3-execution-role",
       "Runtime": "python3.6",
       "Timeout": 60
		}
	}
  }
}